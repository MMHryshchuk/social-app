package com.clearsoft.welivre.domain.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.clearsoft.welivre.domain.entities.Follow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLLOW".
*/
public class FollowDao extends AbstractDao<Follow, Void> {

    public static final String TABLENAME = "FOLLOW";

    /**
     * Properties of entity Follow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FollowId = new Property(0, String.class, "followId", false, "FOLLOW_ID");
        public final static Property FollowTimestamp = new Property(1, String.class, "followTimestamp", false, "FOLLOW_TIMESTAMP");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property UserEmail = new Property(4, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserLanguage = new Property(5, String.class, "userLanguage", false, "USER_LANGUAGE");
        public final static Property UserFollowings = new Property(6, String.class, "userFollowings", false, "USER_FOLLOWINGS");
        public final static Property UserFollowers = new Property(7, String.class, "userFollowers", false, "USER_FOLLOWERS");
        public final static Property UserAvatar = new Property(8, String.class, "userAvatar", false, "USER_AVATAR");
        public final static Property UserPosts = new Property(9, String.class, "userPosts", false, "USER_POSTS");
        public final static Property UserFollowed = new Property(10, String.class, "userFollowed", false, "USER_FOLLOWED");
    };


    public FollowDao(DaoConfig config) {
        super(config);
    }
    
    public FollowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLLOW\" (" + //
                "\"FOLLOW_ID\" TEXT UNIQUE ," + // 0: followId
                "\"FOLLOW_TIMESTAMP\" TEXT," + // 1: followTimestamp
                "\"USER_ID\" TEXT," + // 2: userId
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"USER_EMAIL\" TEXT," + // 4: userEmail
                "\"USER_LANGUAGE\" TEXT," + // 5: userLanguage
                "\"USER_FOLLOWINGS\" TEXT," + // 6: userFollowings
                "\"USER_FOLLOWERS\" TEXT," + // 7: userFollowers
                "\"USER_AVATAR\" TEXT," + // 8: userAvatar
                "\"USER_POSTS\" TEXT," + // 9: userPosts
                "\"USER_FOLLOWED\" TEXT);"); // 10: userFollowed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLLOW\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Follow entity) {
        stmt.clearBindings();
 
        String followId = entity.getFollowId();
        if (followId != null) {
            stmt.bindString(1, followId);
        }
 
        String followTimestamp = entity.getFollowTimestamp();
        if (followTimestamp != null) {
            stmt.bindString(2, followTimestamp);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(5, userEmail);
        }
 
        String userLanguage = entity.getUserLanguage();
        if (userLanguage != null) {
            stmt.bindString(6, userLanguage);
        }
 
        String userFollowings = entity.getUserFollowings();
        if (userFollowings != null) {
            stmt.bindString(7, userFollowings);
        }
 
        String userFollowers = entity.getUserFollowers();
        if (userFollowers != null) {
            stmt.bindString(8, userFollowers);
        }
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(9, userAvatar);
        }
 
        String userPosts = entity.getUserPosts();
        if (userPosts != null) {
            stmt.bindString(10, userPosts);
        }
 
        String userFollowed = entity.getUserFollowed();
        if (userFollowed != null) {
            stmt.bindString(11, userFollowed);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Follow readEntity(Cursor cursor, int offset) {
        Follow entity = new Follow( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // followId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // followTimestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userEmail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userLanguage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userFollowings
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userFollowers
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userAvatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userPosts
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userFollowed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Follow entity, int offset) {
        entity.setFollowId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFollowTimestamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserLanguage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserFollowings(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserFollowers(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserPosts(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserFollowed(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Follow entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Follow entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
