package com.clearsoft.welivre.domain.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.clearsoft.welivre.domain.entities.Feed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEED".
*/
public class FeedDao extends AbstractDao<Feed, Void> {

    public static final String TABLENAME = "FEED";

    /**
     * Properties of entity Feed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PostId = new Property(0, String.class, "postId", false, "POST_ID");
        public final static Property FeedType = new Property(1, String.class, "feedType", false, "FEED_TYPE");
        public final static Property PostContentTxt = new Property(2, String.class, "postContentTxt", false, "POST_CONTENT_TXT");
        public final static Property PostContentImg = new Property(3, String.class, "postContentImg", false, "POST_CONTENT_IMG");
        public final static Property PostSos = new Property(4, String.class, "postSos", false, "POST_SOS");
        public final static Property PostTimestamp = new Property(5, String.class, "postTimestamp", false, "POST_TIMESTAMP");
        public final static Property PostFavorites = new Property(6, String.class, "postFavorites", false, "POST_FAVORITES");
        public final static Property PostComments = new Property(7, String.class, "postComments", false, "POST_COMMENTS");
        public final static Property PostLikes = new Property(8, String.class, "postLikes", false, "POST_LIKES");
        public final static Property PostShares = new Property(9, String.class, "postShares", false, "POST_SHARES");
        public final static Property PostLiked = new Property(10, String.class, "postLiked", false, "POST_LIKED");
        public final static Property PostFavorited = new Property(11, String.class, "postFavorited", false, "POST_FAVORITED");
        public final static Property UserName = new Property(12, String.class, "userName", false, "USER_NAME");
        public final static Property UserAvatar = new Property(13, String.class, "userAvatar", false, "USER_AVATAR");
        public final static Property UserId = new Property(14, String.class, "userId", false, "USER_ID");
        public final static Property UserFollowers = new Property(15, String.class, "userFollowers", false, "USER_FOLLOWERS");
        public final static Property UserFollowings = new Property(16, String.class, "userFollowings", false, "USER_FOLLOWINGS");
        public final static Property UserPosts = new Property(17, String.class, "userPosts", false, "USER_POSTS");
    };


    public FeedDao(DaoConfig config) {
        super(config);
    }
    
    public FeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEED\" (" + //
                "\"POST_ID\" TEXT UNIQUE ," + // 0: postId
                "\"FEED_TYPE\" TEXT," + // 1: feedType
                "\"POST_CONTENT_TXT\" TEXT," + // 2: postContentTxt
                "\"POST_CONTENT_IMG\" TEXT," + // 3: postContentImg
                "\"POST_SOS\" TEXT," + // 4: postSos
                "\"POST_TIMESTAMP\" TEXT," + // 5: postTimestamp
                "\"POST_FAVORITES\" TEXT," + // 6: postFavorites
                "\"POST_COMMENTS\" TEXT," + // 7: postComments
                "\"POST_LIKES\" TEXT," + // 8: postLikes
                "\"POST_SHARES\" TEXT," + // 9: postShares
                "\"POST_LIKED\" TEXT," + // 10: postLiked
                "\"POST_FAVORITED\" TEXT," + // 11: postFavorited
                "\"USER_NAME\" TEXT," + // 12: userName
                "\"USER_AVATAR\" TEXT," + // 13: userAvatar
                "\"USER_ID\" TEXT," + // 14: userId
                "\"USER_FOLLOWERS\" TEXT," + // 15: userFollowers
                "\"USER_FOLLOWINGS\" TEXT," + // 16: userFollowings
                "\"USER_POSTS\" TEXT);"); // 17: userPosts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEED\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feed entity) {
        stmt.clearBindings();
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(1, postId);
        }
 
        String feedType = entity.getFeedType();
        if (feedType != null) {
            stmt.bindString(2, feedType);
        }
 
        String postContentTxt = entity.getPostContentTxt();
        if (postContentTxt != null) {
            stmt.bindString(3, postContentTxt);
        }
 
        String postContentImg = entity.getPostContentImg();
        if (postContentImg != null) {
            stmt.bindString(4, postContentImg);
        }
 
        String postSos = entity.getPostSos();
        if (postSos != null) {
            stmt.bindString(5, postSos);
        }
 
        String postTimestamp = entity.getPostTimestamp();
        if (postTimestamp != null) {
            stmt.bindString(6, postTimestamp);
        }
 
        String postFavorites = entity.getPostFavorites();
        if (postFavorites != null) {
            stmt.bindString(7, postFavorites);
        }
 
        String postComments = entity.getPostComments();
        if (postComments != null) {
            stmt.bindString(8, postComments);
        }
 
        String postLikes = entity.getPostLikes();
        if (postLikes != null) {
            stmt.bindString(9, postLikes);
        }
 
        String postShares = entity.getPostShares();
        if (postShares != null) {
            stmt.bindString(10, postShares);
        }
 
        String postLiked = entity.getPostLiked();
        if (postLiked != null) {
            stmt.bindString(11, postLiked);
        }
 
        String postFavorited = entity.getPostFavorited();
        if (postFavorited != null) {
            stmt.bindString(12, postFavorited);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(13, userName);
        }
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(14, userAvatar);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(15, userId);
        }
 
        String userFollowers = entity.getUserFollowers();
        if (userFollowers != null) {
            stmt.bindString(16, userFollowers);
        }
 
        String userFollowings = entity.getUserFollowings();
        if (userFollowings != null) {
            stmt.bindString(17, userFollowings);
        }
 
        String userPosts = entity.getUserPosts();
        if (userPosts != null) {
            stmt.bindString(18, userPosts);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Feed readEntity(Cursor cursor, int offset) {
        Feed entity = new Feed( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // postId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // feedType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // postContentTxt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postContentImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // postSos
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // postTimestamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // postFavorites
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // postComments
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // postLikes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // postShares
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // postLiked
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // postFavorited
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userAvatar
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // userFollowers
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userFollowings
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // userPosts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feed entity, int offset) {
        entity.setPostId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFeedType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPostContentTxt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostContentImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostSos(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostTimestamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPostFavorites(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPostComments(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPostLikes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPostShares(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPostLiked(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPostFavorited(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserAvatar(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserFollowers(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserFollowings(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserPosts(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Feed entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Feed entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
